# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Konstantin\PycharmProjects\pythonProject\MyQt\ConvertUItoPY.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, uic
from PyQt5.QtWidgets import QFileDialog, QDialog, QMessageBox


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(500, 50)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(500, 50))
        MainWindow.setMaximumSize(QtCore.QSize(500, 50))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("C:\\Users\\Konstantin\\PycharmProjects\\pythonProject\\MyQt\\../../../Users/Konstantin/PycharmProjects/pythonProject/GUI/python.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setWindowOpacity(6.0)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(90, 10, 301, 20))
        self.lineEdit.setAutoFillBackground(False)
        self.lineEdit.setFrame(True)
        self.lineEdit.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.lineEdit.setClearButtonEnabled(False)
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 81, 16))
        self.label.setObjectName("label")
        self.btnOpenFile = QtWidgets.QPushButton(self.centralwidget)
        self.btnOpenFile.setGeometry(QtCore.QRect(372, 10, 20, 20))
        self.btnOpenFile.setObjectName("btnOpenFile")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(396, 10, 100, 20))
        self.pushButton.setObjectName("pushButton")
        MainWindow.setCentralWidget(self.centralwidget)

        # события
        self.btnOpenFile.clicked.connect(self.OpenFile)
        self.pushButton.clicked.connect(self.ConvertFile)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Преобразование файлов *.ui в *.py"))
        self.label.setText(_translate("MainWindow", "Путь к файлу:"))
        self.btnOpenFile.setText(_translate("MainWindow", "..."))
        self.pushButton.setText(_translate("MainWindow", "Конвертировать"))

    def FileDialog(directory='', forOpen=True, fmt='', isFolder=False):
        options = QFileDialog.Options()
        #options |= QFileDialog.DontUseNativeDialog
        #options |= QFileDialog.DontUseCustomDirectoryIcons
        dialog = QFileDialog()
        dialog.setOptions(options)

        dialog.setFilter(dialog.filter() | QtCore.QDir.Hidden)

        # ARE WE TALKING ABOUT FILES OR FOLDERS
        if isFolder:
            dialog.setFileMode(QFileDialog.DirectoryOnly)
        else:
            dialog.setFileMode(QFileDialog.AnyFile)
        # OPENING OR SAVING
        dialog.setAcceptMode(QFileDialog.AcceptOpen) if forOpen else dialog.setAcceptMode(QFileDialog.AcceptSave)

        # SET FORMAT, IF SPECIFIED
        if fmt != '' and isFolder is False:
            dialog.setDefaultSuffix(fmt)
            dialog.setNameFilters([f'{fmt} (*.{fmt})'])

        # SET THE STARTING DIRECTORY
        if directory != '':
            dialog.setDirectory(str(directory))

        if dialog.exec_() == QDialog.Accepted:
            path = dialog.selectedFiles()[0]  # returns a list
            return path
        else:
            return ''

    def ShowMessage(self, message="", title=""):
        msg = QMessageBox()
        if title != "":
            msg.setWindowTitle(title)
        if message != "":
            msg.setText(message)
        # msg.setIcon(QMessageBox.Warning)
        msg.setStandardButtons(QMessageBox.Ok)

        msg.exec_()

    # обработчики событий
    def OpenFile(self):
        fname = self.FileDialog(fmt="ui")
        if fname == "":
            return

        self.lineEdit.setText(fname)

    def ConvertFile(self):
        fname = self.lineEdit.text()
        if fname == "":
            return

        fnamepy = fname[:-2] + "py";

        try:
            with open(fname, "r") as uifile:
                with open(fnamepy, "w") as pyfile:
                    uic.compileUi(uifile, pyfile)
        except Exception as e:
            self.ShowMessage(str(e), "Ошибка")
        else:
            self.ShowMessage(f"Файл {fnamepy} успешно создан", "Файл")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
